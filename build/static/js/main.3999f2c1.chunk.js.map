{"version":3,"sources":["ListaDeUsuarios.jsx","index.jsx"],"names":["ListaDeUsuarios","useState","infos","setInfos","useEffect","axios","get","method","then","resposta","data","cards","card_number","cvv","expiry_date","abrirPagamento","setAbrirPagamento","pegarUsuario","setPegarUsuario","abrirPagou","setAbrirPagou","abrirNaoRecebeu","setAbrirNaoRecebeu","valorCartao","setValorCartao","valorDinheiro","setValorDinheiro","validarCampo","setValidarCampo","map","item","className","key","index","src","img","alt","name","id","username","onClick","style","display","thousandSeparator","value","onChange","event","target","prefix","inputmode","placeholder","substr","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAgIeA,EA1HS,WACpB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACAC,qBAAU,WACNC,IAAMC,IAAI,mDAAoD,CAC1DC,OAAQ,QACTC,MAAK,SAACC,GAAcN,EAASM,EAASC,WAC1C,IAGP,IAAMC,EAAQ,CAEV,CACEC,YAAa,mBACbC,IAAK,IACLC,YAAa,SAGf,CACEF,YAAa,mBACbC,IAAK,IACLC,YAAa,UAUnB,EAA4Cb,mBAAS,QAArD,mBAAOc,EAAP,KAAuBC,EAAvB,KACA,EAAwCf,mBAAS,IAAjD,mBAAOgB,EAAP,KAAqBC,EAArB,KACA,EAAoCjB,mBAAS,QAA7C,mBAAOkB,EAAP,KAAmBC,EAAnB,KACA,EAA8CnB,mBAAS,IAAvD,mBAAOoB,EAAP,KAAwBC,EAAxB,KACA,EAAsCrB,mBAAS,KAA/C,mBAAOsB,EAAP,KAAoBC,EAApB,KACA,EAA0CvB,mBAAS,IAAnD,mBAAOwB,EAAP,KAAsBC,EAAtB,KACA,EAAwCzB,mBAAS,QAAjD,mBAAO0B,EAAP,KAAqBC,EAArB,KA4CI,OACI,oCACK1B,EAAM2B,KAAI,SAAAC,GAAI,OACX,yBAAKC,UAAU,YAAYC,IAAKF,EAAKG,OACjC,yBAAKF,UAAU,WACX,yBAAKA,UAAU,YAAYG,IAAKJ,EAAKK,IAAKC,IAAI,uBAC9C,yBAAKL,UAAU,SACX,kDAAqBD,EAAKO,MAC1B,kCAAQP,EAAKQ,GAAb,gBAA8BR,EAAKS,WAEvC,4BAAQR,UAAU,cAAcS,QAAS,WAnDzC,IAACH,IAmD6DP,EAAKO,KAlDvFrB,EAAkB,QAClBE,EAAgBmB,KAiDI,cAMZ,yBAAKN,UAAU,aAAaU,MAAO,CAACC,QAAS3B,IACzC,uBAAGgB,UAAU,yBAAb,kBAAoD,8BAAOd,IAC3D,yBAAKc,UAAU,cACf,kBAAC,IAAD,CAAcY,mBAAmB,EAAMC,MAAOnB,EAAeoB,SAzB1D,SAACC,GAChBpB,EAAiBoB,EAAMC,OAAOH,OAC9BhB,EAAgB,SAuB+EoB,OAAQ,MAAOC,UAAU,UAAUC,YAAY,YAClI,uBAAGT,MAAO,CAACC,QAAQf,IAAnB,yBAEA,4BAAQiB,MAAOrB,EAAasB,SA7EpB,SAACC,GACrBtB,EAAesB,EAAMC,OAAOH,SA6EhB,4BAAQA,MAAM,KAAd,uBAAoCjC,EAAM,GAAGC,YAAYuC,QAAQ,IACjE,4BAAQP,MAAM,KAAd,uBAAoCjC,EAAM,GAAGC,YAAYuC,QAAQ,KAEjE,yBAAKpB,UAAU,oBACf,4BAAQO,GAAG,kBAAkBE,QA/DpB,WACrBxB,EAAkB,QAClBE,EAAgB,MA6DJ,YACA,4BAAQsB,QAAS,WAxDP,KAAlBf,EACAG,EAAgB,SAIZN,EADgB,MAAhBC,EACmB,GAEA,UAEvBP,EAAkB,QAClBI,EAAc,QACdM,EAAiB,IACjBE,EAAgB,WA4CR,WAKJ,yBAAKG,UAAU,aAAaU,MAAO,CAACC,QAASvB,IACzC,uBAAGY,UAAU,yBAAb,uBACA,0CAAe,2BAAIV,GAAnB,iCACA,4BAAQmB,QAAS,WA9C7BpB,EAAc,UA8CF,aCtHhBgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3999f2c1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport NumberFormat from 'react-number-format';\nimport './listadeusuarios.css';\nimport axios from 'axios';\n\n//Pegando as informações da API pelo GET\nconst ListaDeUsuarios = () => {\n    const [infos, setInfos] = useState([])\n    useEffect(() => {\n        axios.get('https://www.mocky.io/v2/5d531c4f2e0000620081ddce', {\n            method: 'GET',\n        }).then((resposta) => {setInfos(resposta.data)})\n    }, [])\n\n// Mock com lista de cartões para teste\nconst cards = [\n    // cartão válido\n    {\n      card_number: '1111111111111111',\n      cvv: 789,\n      expiry_date: '01/18',\n    },\n    // cartão inválido\n    {\n      card_number: '4111111111111234',\n      cvv: 123,\n      expiry_date: '01/20',\n    },\n];\n\n// Função para pegar a escolha do cartão do input select\nconst escolhaDoCartao = (event) => {\n    setValorCartao(event.target.value);\n}\n\n// Ações dos modals\nconst [abrirPagamento, setAbrirPagamento] = useState(\"none\"); // Para abrir modal de pagamento\nconst [pegarUsuario, setPegarUsuario] = useState(\"\"); // Para pegar o nome do usuário\nconst [abrirPagou, setAbrirPagou] = useState(\"none\"); // Para abrir modal com recibo de pagamento\nconst [abrirNaoRecebeu, setAbrirNaoRecebeu] = useState(\"\"); // Para msg de erro de pagamento\nconst [valorCartao, setValorCartao] = useState(\"1\"); // Para pegar o cartão escolhido para pagamento\nconst [valorDinheiro, setValorDinheiro] = useState(\"\"); // Para pegar o valor de pagamento digitado\nconst [validarCampo, setValidarCampo] = useState(\"none\"); // Para validar campo de valor digitado\n\n// Função para abrir o modal de pagamento do usuário\nconst abrirModalPagar = (name) => {\n    setAbrirPagamento(\"flex\")\n    setPegarUsuario(name)\n}\n\nconst fecharModalPagar = () => {\n    setAbrirPagamento(\"none\")\n    setPegarUsuario(\"\")\n}\n\n\n// Função que abre o modal de recibo de pagamento \nconst abrirModalPagou = () => {\n    if (valorDinheiro === \"\") {\n        setValidarCampo(\"flex\");\n    } else \n        {\n        if (valorCartao === \"1\") {\n            setAbrirNaoRecebeu(\"\");\n        } else {\n            setAbrirNaoRecebeu(\"não\");\n        }\n        setAbrirPagamento(\"none\");\n        setAbrirPagou(\"flex\");\n        setValorDinheiro(\"\");\n        setValidarCampo(\"none\");\n    }\n}\n\n// Função para fechar o modal do recibo de pagamento\nconst fecharModal = () => {\n    setAbrirPagou(\"none\");\n}\n\n// Função para validar campo de valor para pagamento do usuário\nconst valorInput = (event) => {\n    setValorDinheiro(event.target.value);\n    setValidarCampo(\"none\");\n}\n\n// Renderizando na tela as informações recebidas da API \n    return (\n        <>\n            {infos.map(item => (\n                <div className=\"container\" key={item.index}>\n                    <div className=\"content\">\n                        <img className=\"thumbnail\" src={item.img} alt=\"Foto do usuário\" />\n                        <div className=\"infos\">   \n                            <p>Nome do Usuário: {item.name}</p>\n                            <p>ID: {item.id} - Username: {item.username}</p>\n                        </div>\n                        <button className=\"botao-pagar\" onClick={()=>{abrirModalPagar(item.name)}}>Pagar</button>\n                    </div>\n                </div>\n            ))}\n\n            {/*--------------------------------Abrir Modal de pagamento----------------------------------*/}\n            <div className=\"abrirModal\" style={{display: abrirPagamento}}>\n                <p className=\"texto-cabecalho-modal\">Pagamento para <span>{pegarUsuario}</span></p>\n                <div className=\"valorInput\">\n                <NumberFormat thousandSeparator={true} value={valorDinheiro} onChange={valorInput} prefix={'R$ '} inputmode=\"numeric\" placeholder=\"R$ 0,00\"/>\n                <p style={{display:validarCampo}}>Campo obrigatório</p>\n                </div>\n                <select value={valorCartao} onChange={escolhaDoCartao}>\n                <option value=\"1\">Cartão com final {cards[0].card_number.substr(-4)}</option>\n                <option value=\"2\">Cartão com final {cards[1].card_number.substr(-4)}</option>\n                </select>\n                <div className=\"container-button\">\n                <button id=\"button-cancelar\" onClick={fecharModalPagar}>Cancelar</button>\n                <button onClick={()=>{abrirModalPagou ()}}>Pagar</button>\n                </div>\n            </div>  \n\n            {/*------------------------------Abrir Modal de recibo de pagamento--------------------------------*/}\n            <div className=\"abrirModal\" style={{display: abrirPagou}}>\n                <p className=\"texto-cabecalho-modal\">Recibo de pagamento</p>\n                <p>O Pagamento <b>{abrirNaoRecebeu}</b> foi concluído com sucesso</p>\n                <button onClick={()=>{fecharModal()}}>Fechar</button>\n            </div>\n        </>\n    )\n}\n\nexport default ListaDeUsuarios","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ListaDeUsuarios from './ListaDeUsuarios';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ListaDeUsuarios />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}